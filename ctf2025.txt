$string = "=0XQyAjMfxWYi9GbHtHUBlkR"

$b = $string.ToCharArray()
[array]::Reverse($b)
$c = -join($b)

$decoded = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($c))

$service = Get-Service -Name $decoded -ErrorAction SilentlyContinue

if (!$service) {
    Write-Output "Service '$decoded' does not exist. Creating the service..."

    # Command to create the service using sc.exe
    $binaryPath = "C:\Windows\System32\calc.exe"  # Replace with the actual path to the executable you want the service to run
    $createServiceCommand = "sc.exe create $decoded binPath= `"$binaryPath`" start= auto"
    
    # Execute the command to create the service
    cmd.exe /c $createServiceCommand
    Write-Output "Service '$decoded' created successfully."

    # Refresh the service variable to verify creation
    $service = Get-Service -Name $decoded -ErrorAction SilentlyContinue
}

# Start the service if it exists and isn't running
if ($service) {
    if ($service.Status -ne "Running") {
        Start-Service -Name $decoded
        Write-Output "Service '$decoded' started successfully."
    } else {
        Write-Output "Service '$decoded' is already running."
    }
} else {
    Write-Output "Failed to create or locate service '$decoded'."
}